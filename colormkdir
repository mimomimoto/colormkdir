#!/bin/sh

usage() {
    echo "
USAGE: 
    colormkdir [OPTIONS]

OPTIONS:
    -h                                  Show usage
    -u                                  Update color definition
    -m [value] <directory name>         Make directory in specified color
    -c [value] <directory name>         Change directory color as specified color
" >&2
}

updateIcon(){
"$1" - "$2" << EOF
from PIL import Image
import glob
import os
import json
import subprocess
import sys

png_path_list = glob.glob(sys.argv[1] + "/icons/default/default.iconset/*.png")
json_open = open(sys.argv[1] + "/color_list.json", "r")
json_load = json.load(json_open)
for color_name, color_code in json_load.items():
    color_rgb = [int(color_code[1:3], 16), int(color_code[3:5], 16), int(color_code[5:7], 16)]
    try:
        os.mkdir(sys.argv[1] + "/icons/" + color_name + ".iconset")
    except:
        pass
    for png_path in png_path_list:
        file_name = os.path.split(png_path)[1]
        im = Image.open(png_path)
        base_color = im.getpixel((im.size[0]/2, im.size[1]/2))
        r_diff = color_rgb[0] - base_color[0]
        g_diff = color_rgb[1] - base_color[1]
        b_diff = color_rgb[2] - base_color[2]
        for i in range(im.size[0]):
            for j in range(im.size[1]):
                rgb_color = im.getpixel((i, j))
                if(rgb_color[3] == 0):
                    continue
                im.putpixel((i, j), (rgb_color[0] + r_diff, rgb_color[1] + g_diff, rgb_color[2] + b_diff, rgb_color[3]))
        im.save(sys.argv[1] + "/icons/" + color_name + ".iconset/" + file_name)
    subprocess.run(["iconutil",  "-c", "icns", sys.argv[1] + "/icons/" + color_name + ".iconset"])
    subprocess.run(["rm",  "-rf", sys.argv[1] + "/icons/" + color_name + ".iconset"])
    print("Update '" + color_name + "' icon")
EOF
}

setFolderIcon(){
"$1" - "$2" "$3" << EOF
import Cocoa
import sys
Cocoa.NSWorkspace.sharedWorkspace().setIcon_forFile_options_(Cocoa.NSImage.alloc().initWithContentsOfFile_(sys.argv[1]), sys.argv[2], 0)
EOF
}

absolute_path=$(cd $(dirname ${0}) && pwd)
# set on your python path
python_path=$(which python)

flag_count=0
h_flag="0"
u_flag="0"
m_flag="0"
c_flag="0"
color=""

while getopts 'hum:c:' opt; do
    case "${opt}" in
        h)  h_flag="1"
            flag_count=$((flag_count + 1));;
        u)  u_flag="1"
            flag_count=$((flag_count + 1));;
        m)  m_flag="1"
            flag_count=$((flag_count + 1))
            color=${OPTARG};;
        c)  c_flag="1"
            flag_count=$((flag_count + 1))
            color=${OPTARG};;
        \?)  usage && exit 1
    esac
done

if [ $(( flag_count )) -gt 1 ]; then
    echo "Illegal Option"
    usage && exit 1
fi

if [ ${h_flag} = "1" ]; then
    usage && exit 0
fi

if [ ${u_flag} = "1" ]; then
    updateIcon "$python_path" "$absolute_path"
fi

if [ ${m_flag} = "1" ]; then 
    shift $((OPTIND - 1))
    color_code=$(grep -o '"'"${color}"'":"[^"]*' "${absolute_path}"/color_list.json | grep -o '[^"]*$')
    if [ -z "$color_code" ]; then
        echo "Invalid Color Code"
        usage
        exit 1
    fi
    if [ -d $@ ]; then
        echo "Error: Directory Exists"
        usage
        exit 1
    fi
    mkdir $@
    FolderIcon="${absolute_path}""/icons/"${color}".icns"
    PathToSetIconFor=$@
    setFolderIcon "$python_path" "$FolderIcon" "$PathToSetIconFor"
fi

if [ ${c_flag} = "1" ]; then
    shift $((OPTIND - 1))
    color_code=$(grep -o '"'"${color}"'":"[^"]*' "${absolute_path}"/color_list.json | grep -o '[^"]*$')
    if [ -z "$color_code" ]; then
        echo "Invalid Color Code"
        usage
        exit 1
    fi
    if [ ! -d $@ ]; then
        echo "Error: Directory Does Not Exist"
        usage
        exit 1
    fi
    FolderIcon="${absolute_path}""/icons/"${color}".icns"
    PathToSetIconFor=$@
    setFolderIcon "$python_path" "$FolderIcon" "$PathToSetIconFor"
fi